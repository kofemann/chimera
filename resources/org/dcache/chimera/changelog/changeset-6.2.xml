<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="29" author="tigran">
        <comment>Add extended attribute support</comment>

        <createTable tableName="t_xattr">
            <column name="inumber" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="ikey" type="varchar(255)">
                <constraints nullable="false"/>
            </column>
            <column name="ivalue" type="BLOB">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addPrimaryKey columnNames="inumber, ikey" constraintName="i_xattr_pkey" tableName="t_xattr"/>
        <addForeignKeyConstraint baseColumnNames="inumber" baseTableName="t_xattr"
                                 constraintName="i_xattr_inumber_fkey"
                                 deferrable="false"
                                 initiallyDeferred="false"
                                 onDelete="CASCADE"
                                 onUpdate="CASCADE"
                                 referencedColumnNames="inumber"
                                 referencedTableName="t_inodes"
        />

        <rollback>
            <dropTable tableName="t_xattr"/>
        </rollback>

    </changeSet>

    <changeSet id="30" author="tigran" dbms="postgresql">
        <comment>Update f_create_inode stored procedure to postgres95 friendly</comment>
        <createProcedure>
            CREATE OR REPLACE FUNCTION f_create_inode95(parent bigint, name varchar, id varchar, type integer, mode integer, nlink integer, uid integer, gid int, size bigint, io integer, now timestamp) RETURNS bigint AS $$
            DECLARE
                newid bigint;
            BEGIN
                INSERT INTO t_inodes VALUES (id,type,mode,nlink,uid,gid,size,io,now,now,now,now,0) RETURNING inumber INTO newid;
                INSERT INTO t_dirs VALUES (parent, newid, name) ON CONFLICT ON CONSTRAINT t_dirs_pkey DO NOTHING;
                IF NOT FOUND THEN
                    -- no rows get updated
                    RETURN -1;
                END IF;
                UPDATE t_inodes SET inlink=inlink+1,imtime=now,ictime=now,igeneration=igeneration+1 WHERE inumber = parent;
                RETURN newid;
            END;
            $$ LANGUAGE plpgsql;
        </createProcedure>

        <rollback>
            <sql>
               DROP FUNCTION IF EXISTS f_create_inode95(parent bigint, name varchar, id varchar, type integer, mode integer, nlink integer, uid integer, gid int, size bigint, io integer, now timestamp);
            </sql>
        </rollback>
    </changeSet>
</databaseChangeLog>